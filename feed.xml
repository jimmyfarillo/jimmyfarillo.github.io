<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-03-07T12:05:22-05:00</updated><id>/feed.xml</id><title type="html">Jimmy Farillo</title><subtitle>NYC software engineer</subtitle><entry><title type="html">The Basics of Database Indexes for Relational Databases</title><link href="/2017/08/23/the-basics-of-database-indexes-for-relational-databases.html" rel="alternate" type="text/html" title="The Basics of Database Indexes for Relational Databases" /><published>2017-08-23T00:00:00-04:00</published><updated>2017-08-23T00:00:00-04:00</updated><id>/2017/08/23/the-basics-of-database-indexes-for-relational-databases</id><content type="html" xml:base="/2017/08/23/the-basics-of-database-indexes-for-relational-databases.html">&lt;p&gt;The purpose of creating an index on a particular table in your database is to
make it faster to search through the table and find the row or rows that you
want. The downside is that indexes make it slower to add rows or make updates to
existing rows for that table. So adding indexes can increase read performance
and decrease write performance. Indexes are also used to enforce uniqueness
constraints, but I won’t go into that for this post.&lt;/p&gt;

&lt;h2 id=&quot;but-first-lets-talk-about-karaoke&quot;&gt;But First, Let’s Talk About Karaoke!&lt;/h2&gt;

&lt;p&gt;Besides being my favorite pastime (just FYI, I’m Filipino), karaoke provides a
good analogy for indexes and might help you when reading the rest of this post.&lt;/p&gt;

&lt;p&gt;All karaoke joints I’ve been to provide songbooks that contain the list of songs
you can sing. The pages are organized like a database table, usually with 3
columns: song title, artist, and code. The code is what you enter into the
system to bring up the karaoke track. And there are usually two songbooks: one
sorted by artist name and one sorted by song title. That way you can either
think of an artist you want to sing and then look through their songs, or look
up a specific song title you know you want to sing or in case you don’t know the
artist’s name. These songbooks are like indexes for the database of songs. They
provide a sorted list of data that is easily searchable by relevant information.
There isn’t an index for the code column because that information is not
relevant information that you would search by.&lt;/p&gt;

&lt;p&gt;Back to actual databases…&lt;/p&gt;

&lt;h2 id=&quot;how-do-indexes-increase-read-performance&quot;&gt;How Do Indexes Increase Read Performance?&lt;/h2&gt;

&lt;p&gt;Think about the primary key column of a particular table. It is usually the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;
column, and it is usually a digit that increments with each new row in the
table. So when you try to retrieve a specific row from the database using its
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, the database doesn’t need to search through every single row to find the
one you’re asking for; the data is already sorted and can be searched using
efficient algorithms. Even if you were to rearrange the rows in the table so
that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column was unsorted, the primary key column of tables is
automatically indexed, meaning there is a copy of that column with the sorted
data that the database will use to search. And that index contains pointers to
the actual rows in the table, so once it has found the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; from that
copied data, it knows exactly where to find the rest of the information for that
row.&lt;/p&gt;

&lt;p&gt;Indexes on columns that are not the primary key column work in the same way. For
example, you might have an articles table in your database that contains columns
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt;, as well as the primary key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;.
Depending on how you query for data in your application, you might want to add
indexes on some of these columns to improve read performance.&lt;/p&gt;

&lt;p&gt;If your application has a feature where you can search for articles by their
title, it might be wise to put an index on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; column. This will create
a copy of that column where all the articles’ titles are sorted. Maybe your
application also allows users to view articles from a specific time period that
they define. Instead of the database having to check every single row’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; column, you can put an index on that column, and the database
will be able to easily find the articles that were published in that time frame
because they will all be right next to each other. However, it seems unnecessary
(and a bit ridiculous) to put on index on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; column because your
application is unlikely to query the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;articles&lt;/code&gt; table by the full contents of
each article. (There are much better ways to search through large bodies of text
in databases.)&lt;/p&gt;

&lt;p&gt;Indexes can also be useful for foreign key columns when dealing with
associations. Let’s say the articles table also contains an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column
that corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column on the users table. If you put an index on
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column, when you query the database for all the articles by a
particular author, the results can be found much faster because all articles by
that author will be grouped together.&lt;/p&gt;

&lt;h2 id=&quot;indexes-on-multiple-columns&quot;&gt;Indexes On Multiple Columns&lt;/h2&gt;

&lt;p&gt;You can also create a single index from multiple columns in a table. Extending
the example from above, maybe your application allows authors to view their own
articles, and the default view is to show them in reverse chronological order.
On your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;articles&lt;/code&gt; table, it would make sense to create an index using both the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; columns. Here’s a diagram of how you might think
about that index:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| author_id | published_at |
|-----------|--------------|
|           | 2017-08-17   |
|     1     | 2017-08-20   |
|           | 2017-08-22   |
|-----------|--------------|
|           | 2017-08-14   |
|           | 2017-08-20   |
|     2     | 2017-08-21   |
|           | 2017-08-22   |
|           | 2017-08-23   |
|-----------|--------------|
|     3     | 2017-08-01   |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when querying the database for all the articles by an author and ordered by
their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; dates, the database can use this index to quickly retrieve
the data.&lt;/p&gt;

&lt;p&gt;When creating an index from multiple columns, it is important that you specify
the correct order of the columns. The above index was created by first
specifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column and then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; column. Had it
been reversed, the index would not be nearly as useful for the page we want:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| published_at | author_id |
|--------------|-----------|
| 2017-08-01   | 3         |
|--------------|-----------|
| 2017-08-07   | 3         |
|--------------|-----------|
| 2017-08-14   | 2         |
|              | 3         |
|--------------|-----------|
| 2017-08-17   | 1         |
|--------------|-----------|
| 2017-08-20   | 1         |
|              | 2         |
|--------------|-----------|
| 2017-08-21   | 2         |
|--------------|-----------|
| 2017-08-22   | 1         |
|              | 2         |
|--------------|-----------|
| 2017-08-23   | 2         |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When creating an index, you want the database to be able to eliminate as many
items as possible for at each step of its search. In the first example, after
finding the appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt;, all other rows for other authors are
eliminated, and the database then just has to search through a handful of
remaining rows. The second index is not even usable for our purposes of showing
a single author’s articles in reverse chronology because there is no way to
effectively search through the indexed data. So keep in mind the column order
that will create the index that will be most beneficial to your database
queries.&lt;/p&gt;

&lt;h2 id=&quot;how-do-indexes-decrease-write-performance&quot;&gt;How Do Indexes Decrease Write Performance?&lt;/h2&gt;

&lt;p&gt;The cost of improving database read times using indexes is that write times
suffer. Adding a new row to a table without indexes is simple. The database
finds the next available space in the table to add the new entry and adds it,
that’s it. However, when adding a new row to a table with one or more indexes,
the database adds the new entry to the table, and then it has to add a new entry
into each index on that table, making sure to insert the entry into the correct
spot in the index to ensure that the data is properly sorted. And this
performance degradation applies to creates, updates, and deletes for the table.
For this reason, adding unnecessary indexes on tables should be avoided, and
indexes that are no longer used should be removed.&lt;/p&gt;

&lt;p&gt;Adding indexes is about improving performance of search queries. Maybe the goal
of your database is to provide a data store that is often written to and rarely
read from. If that is the case, decreasing the performance of the more common
operation, writing, is probably not worth the increase in performance you get
from reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">The purpose of creating an index on a particular table in your database is to make it faster to search through the table and find the row or rows that you want. The downside is that indexes make it slower to add rows or make updates to existing rows for that table. So adding indexes can increase read performance and decrease write performance. Indexes are also used to enforce uniqueness constraints, but I won’t go into that for this post.</summary></entry><entry><title type="html">AlterConf NYC 2017 + Social Rules for Healthy Communication</title><link href="/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication.html" rel="alternate" type="text/html" title="AlterConf NYC 2017 + Social Rules for Healthy Communication" /><published>2017-08-21T00:00:00-04:00</published><updated>2017-08-21T00:00:00-04:00</updated><id>/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication</id><content type="html" xml:base="/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication.html">&lt;p&gt;This weekend I attended my first &lt;a href=&quot;https://www.alterconf.com/&quot;&gt;AlterConf&lt;/a&gt;, a
one-day conference with the aim of helping to create a more inclusive tech
industry. There were many great talks throughout the day as the speakers shared
their inspiring stories and delved into thought-provoking topics, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Designing ethically-conscious products&lt;/li&gt;
  &lt;li&gt;Potential problems with the way tech companies express how they value their
employees&lt;/li&gt;
  &lt;li&gt;How to empower so-called “quiet developers”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One talk stood out to me for its simplicity and message of “fostering healthy
communication on small teams”. The speaker was Rachel Vincent, the Head of
Operations at The Recurse Center, which provides educational programming
retreats in NYC. In Rachel’s talk, she highlighted the social rules that her
team has adopted that help ensure they communicate with each other in efficient,
honest, and non-harmful ways. These are the four social rules:&lt;/p&gt;

&lt;h2 id=&quot;no-feigning-surprise&quot;&gt;No Feigning Surprise&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Really?! You don’t know about… ?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This rule is about not acting surprised when a person shares that they don’t
know about something. This type of reaction adds no benefit to the conversation
and can often lead to making the person feel bad or insecure for not knowing
about the topic. Furthermore, in an industry like tech where people are
constantly learning, it is important for people to feel comfortable admitting
that they don’t know something to their colleagues. When people feign surprise
at such an admission, it can inhibit the learning process for that individual.&lt;/p&gt;

&lt;h2 id=&quot;no-well-actuallys&quot;&gt;No Well-Actuallys&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A: “Beethoven’s Symphony №5 is probably his most famous work, and he was 38
years old when he finished it. It’s my favorite of his, especially the second
movement.”
B: “Well, actually he was 37 years old.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A well-actually is when someone corrects (often by interruption) an
insignificant fact stated by another person. While it is always important to
convey accurate information, being corrected on small details is not beneficial
to the actual topic being discussed. These minor corrections do not serve
truth-seeking. Corrections that do provide real clarification to the
conversation and are not given with a disguised yearning for admiration are, of
course, always welcome.&lt;/p&gt;

&lt;h2 id=&quot;no-backseat-driving&quot;&gt;No Backseat Driving&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A: “Maybe running that rake task again will fix it.”
B: “I tried running it 5 times already.”
C: “Just clear the cache!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Backseat driving is when a conversation is happening between two or more people
and someone attempts to interject with their own advice. In most cases, that
individual does not have the full information to be providing useful advice and
ends up slowing down the individuals actually engaged in the conversation. It is
most efficient (and least annoying) to fully engage in the conversation first
before offering advice.&lt;/p&gt;

&lt;h2 id=&quot;no-subtle-isms&quot;&gt;No Subtle-isms&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“It’s so easy my grandmother could do it.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A subtle-ism is a statement with underlying, often unintentional, tones of
sexism, racism, homophobia, or other similar biases that can make others feel
uncomfortable or unwelcome. The last thing we want to do is make someone feel
bad for various aspects about their lifestyle and/or identity, even if that was
not the intention of the statement.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m not going to lie, I have definitely broken all of these rules before, and I
am sure that I will continue to break them. I’m not perfect. But my hope is that
by keeping these rules in mind during both my personal and professional
communications, I can become better at identifying when I break them so that I
can apologize, correct myself, and move on.&lt;/p&gt;

&lt;p&gt;I also highly encourage anyone who is interested to attend an AlterConf event.
They take place throughout the year in cities across the world, the tickets are
fairly inexpensive for a tech conference (basic tickets were $25 for the event
I attended), and the mission of the conference is quite admirable and important
in our largely homogenous, oftentimes uninviting industry.&lt;/p&gt;

&lt;p&gt;And a big thanks to my friend &amp;amp; coworker Melissa Moy for urging me to attend
this event!&lt;/p&gt;</content><author><name></name></author><summary type="html">This weekend I attended my first AlterConf, a one-day conference with the aim of helping to create a more inclusive tech industry. There were many great talks throughout the day as the speakers shared their inspiring stories and delved into thought-provoking topics, including:</summary></entry><entry><title type="html">Learn Design Patterns: Strategy Pattern</title><link href="/2017/02/23/learn-design-patterns-strategy-pattern.html" rel="alternate" type="text/html" title="Learn Design Patterns: Strategy Pattern" /><published>2017-02-23T00:00:00-05:00</published><updated>2017-02-23T00:00:00-05:00</updated><id>/2017/02/23/learn-design-patterns-strategy-pattern</id><content type="html" xml:base="/2017/02/23/learn-design-patterns-strategy-pattern.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Learn Design Patterns: Template Method Pattern</title><link href="/2017/02/19/learn-design-patterns-template-method-pattern.html" rel="alternate" type="text/html" title="Learn Design Patterns: Template Method Pattern" /><published>2017-02-19T00:00:00-05:00</published><updated>2017-02-19T00:00:00-05:00</updated><id>/2017/02/19/learn-design-patterns-template-method-pattern</id><content type="html" xml:base="/2017/02/19/learn-design-patterns-template-method-pattern.html">&lt;p&gt;A couple friends and I have a web development book club. The goal is to learn
and grow together as software engineers. But really, sometimes it’s more like a
support group, where we use a lot of 😞, ☹️, and 😢 to discuss our respective
screw-ups at work and the impossible vastness of information about web
development and how we only know the smallest tiniest minusculest amount of it.
We’re a fun group…&lt;/p&gt;

&lt;p&gt;The first book we read together was &lt;em&gt;Practical Object-Oriented Design in Ruby&lt;/em&gt;
by Sandi Metz. Really amazing resource for new Ruby devs (or probably any new
dev using an OO language). For our next book, we just started reading &lt;em&gt;Design
Patterns in Ruby&lt;/em&gt; by Russ Olsen, so this will be the first in a planned series
about the various design patterns discussed in the book.&lt;/p&gt;

&lt;p&gt;The first pattern is the template method pattern.&lt;/p&gt;

&lt;h2 id=&quot;inheritance--polymorphism&quot;&gt;Inheritance + Polymorphism&lt;/h2&gt;

&lt;p&gt;The template method pattern is an object-oriented design pattern that relies on
inheritance and polymorphism. By inheritance, I am talking about the
parent-child relationship between classes, where a class can be defined as a
subclass of another and inherits all of that superclass’ methods. By
polymorphism, I am talking about the ability to invoke the same method on
multiple objects of different classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Inheritance

class Computer
  def initialize
    @on = false
  end

  def power_on
    @on = true
    puts 'Booting up...'
  end
end

class Laptop &amp;lt; Computer
  def close_lid
    ...
  end

  def open_lid
    ...
  end
end

my_laptop = Laptop.new
my_laptop.power_on          # =&amp;gt; Booting up...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the basic inheritance example above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; class defines the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_on&lt;/code&gt; method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Laptop&lt;/code&gt; class is defined as a subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; and
also defines its own set of methods. But since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; is its superclass,
instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Laptop&lt;/code&gt; inherit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_on&lt;/code&gt; method and are able to be sent that
message.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Polymorphism

def too_big?(obj)
  obj.length &amp;gt; 10
end

str = 'Hello, World!'
arr = [1, 2, 3]

too_big?(str)               # =&amp;gt; true
too_big?(arr)               # =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The polymorphism example is showing that both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; classes
implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; method. There is some role that they are both playing,
perhaps the role of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Countable&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;too_big?&lt;/code&gt; method doesn’t care whether it
is being passed a string or an array; it just cares whether it is being passed
an object that is countable and has implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;. Being able to send the
same message to objects that are instances of different classes is polymorphism.&lt;/p&gt;

&lt;h2 id=&quot;the-template-method-pattern&quot;&gt;The Template Method Pattern&lt;/h2&gt;

&lt;p&gt;The template method pattern combines the concepts of inheritance and
polymorphism to solve the common programming problem of needing to allow for
some level of variation in an algorithm.&lt;/p&gt;

&lt;p&gt;If you were a strange person, you might think of your life in terms of Ruby
objects and messages that you send to these objects. So if you wanted to throw a
birthday party for your niece, you might have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class with a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; method that does all the steps necessary for giving your niece a
successful birthday party.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party
    invite_guests
    clean_house
    buy_birthday_cake
    welcome_guests
    sing_happy_birthday
    kick_out_guests
    clean_house
  end

  private

  ...all the private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What if you wanted to throw another party, maybe a game night for you and some
friends? It would be great to reuse this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt;
method, but while some parts of the method are general to any party, some parts
are very specific to birthday parties.&lt;/p&gt;

&lt;p&gt;We could put in some conditionals:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party(type)
    invite_guests
    clean_house

    if type == 'birthday'
      buy_birthday_cake
    elsif type == 'game_night'
      buy_board_games
    end

    welcome_guests

    if type == 'birthday'
      sing_happy_birthday
    elsif type == 'game_night'
      play_games
    end

    kick_out_guests
    clean_house
  end

  private

  ...all the private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yikes! That is not the best solution. Any time you want to throw a different
kind of party, you will have to modify this method until it grows out of
control. And you’ll have to add more and more private methods to this class. But
having completely separate classes for each party type isn’t ideal, either,
since we saw that most of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; logic is common to any type of
party.&lt;/p&gt;

&lt;p&gt;The template method pattern is a way of separating the parts that are the same
from the parts that are different. The parts that are the same get implemented
in a parent class while the parts that are different are implemented in the
subclasses.&lt;/p&gt;

&lt;p&gt;The only parts that differ between the two party types are the buying of
supplies and the party activities. So we can create an abstract Party class
(abstract because there will be no instances of it) that will serve as the
superclass for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party
    invite_guests
    buy_supplies
    clean_house
    welcome_guests
    do_activities
    kick_out_guests
    clean_house
  end

  private

  def buy_supplies
    raise 'Not implemented: buy_supplies'
  end

  def do_activities
    raise 'Not implemented: do_activities'
  end

  ...all the other private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, all the parts that are the same can stay in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;, and the parts that are
different can be defined in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BirthdayParty &amp;lt; Party

  private

  def buy_supplies
    buy_birthday_cake
  end

  def do_activities
    sing_happy_birthday
  end

  def buy_birthday_cake
    ...
  end

  def sing_happy_birthday
    ...
  end
end

class GameNight &amp;lt; Party

  private

  def buy_supplies
    buy_board_games
  end

  def do_activities
    play_games
  end

  def buy_board_games
    ...
  end

  def play_games
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The superclass is the template for what happens for a party, and each subclass
implements just the parts that vary from the template.&lt;/p&gt;

&lt;p&gt;In the current implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;, an error is raised for methods that
are meant to be implemented in the subclasses. This provides a clear signal to
anyone wanting to implement a new type of party that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buy_supplies&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_activities&lt;/code&gt; are methods that should be implemented in the new party type.
Another approach would be to implement these methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; with some
default behavior that the subclasses then override.&lt;/p&gt;

&lt;p&gt;Back to the use of inheritance and polymorphism. It is fairly clear from the
code that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; are both subclasses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;. So
every method defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; is also available to the subclasses. In our
example, the only publicly available method in either subclass is the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; method defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;. That’s where the polymorphism comes in.
Whatever object decides to throw a party can do so by sending the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt;
message to an instance of either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt;. It doesn’t care
which type of object it sends the message to, and even though the results may be
different, both types of objects will respond to the message.&lt;/p&gt;</content><author><name></name></author><summary type="html">A couple friends and I have a web development book club. The goal is to learn and grow together as software engineers. But really, sometimes it’s more like a support group, where we use a lot of 😞, ☹️, and 😢 to discuss our respective screw-ups at work and the impossible vastness of information about web development and how we only know the smallest tiniest minusculest amount of it. We’re a fun group…</summary></entry></feed>