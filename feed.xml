<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-03-05T23:56:17-05:00</updated><id>/feed.xml</id><title type="html">Jimmy Farillo</title><subtitle>NYC software engineer</subtitle><entry><title type="html">Iffy About IIFEs?</title><link href="/2020/03/03/iffy-about-iifes.html" rel="alternate" type="text/html" title="Iffy About IIFEs?" /><published>2020-03-03T00:00:00-05:00</published><updated>2020-03-03T00:00:00-05:00</updated><id>/2020/03/03/iffy-about-iifes</id><content type="html" xml:base="/2020/03/03/iffy-about-iifes.html">&lt;p&gt;Typically, when writing code, we build out functions and then write out some
other code that calls those functions. Something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function myFunc() {
  return &quot;I swear it's not me!&quot;;
}

var whatsThatSmell = myFunc();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there’s a cool thing in JavaScript called an IIFE (immediately-invoked
function expression). IIFEs define functions and then run them right after being
created. Like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function myFunc2() {
  return &quot;I'm not the one who smells funny!&quot;
}());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The parentheses after the function’s closing brace immediately calls that
function.&lt;/p&gt;

&lt;h2 id=&quot;but-why-would-we-want-to-use-an-iife&quot;&gt;But why would we want to use an IIFE?&lt;/h2&gt;

&lt;p&gt;One reason is that an IIFE allows you to create a private scope. Scope is a term
to describe what parts of the code have access to other parts of the code. So
having a private scope for your function means that the data, such as variables,
inside the function are fully contained in the function and not accessible from
other parts of the code. For cases where using an IIFE is appropriate, not using
an IIFE would likely require you to define global variables. Beautiful code
tries to limit superfluous global variables, as having too many global variables
is considered to be “polluting” the namespace — so don’t do that.&lt;/p&gt;

&lt;p&gt;You would not want to use an IIFE for functions that you need to run multiple
times. But for code that you just need to run once, and that you want to be
fully contained within a private scope, then an IIFE might be what you need.&lt;/p&gt;

&lt;p&gt;A couple more cool things about IIFEs:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;They don’t need to be named&lt;/li&gt;
  &lt;li&gt;You can use crazy simple variables inside of them. Like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function() {
  var x = 50;
  return x;
}());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Defining a variable named x in your code is usually a terrible idea because it
is both nondescript and likely to interfere with any other variables named x
that may exist in the environment where your code is being executed. But in an
IIFE, that x isn’t touching anything else and nothing else can touch it. You
still probably wouldn’t want to name a variable x in your IIFE because it is
extremely nondescript, but it’s cool that you could do it without the
possibility of breaking your code.&lt;/p&gt;</content><author><name></name></author><summary type="html">Typically, when writing code, we build out functions and then write out some other code that calls those functions. Something like this:</summary></entry><entry><title type="html">Logic + Creativity</title><link href="/2020/02/08/logic-creativity.html" rel="alternate" type="text/html" title="Logic + Creativity" /><published>2020-02-08T00:00:00-05:00</published><updated>2020-02-08T00:00:00-05:00</updated><id>/2020/02/08/logic-creativity</id><content type="html" xml:base="/2020/02/08/logic-creativity.html">&lt;p&gt;I’m about to start a 13-week coding immersive at Fullstack Academy. I won’t go
into the details of why I chose Fullstack, but let’s just say that, so far, I’m
extremely happy with my decision. I’m also super pumped about starting!&lt;/p&gt;

&lt;p&gt;However, I will let you in on why I’ve decided to learn to code.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-think-coding-is-so-awesome&quot;&gt;Why do I think coding is so awesome?&lt;/h2&gt;

&lt;p&gt;Because it is both logical and creative. I’m sure most people are aware that
coding is very structured and based in logic. But I think an effective coder
must also be creative, imaginative, and innovative. Building something, such as
a web application, from essentially nothing is a very creative process. This
merging of logic and creativity, of structure and imagination, into a single
skill set is a large part of why coding appeals to me.&lt;/p&gt;

&lt;h2 id=&quot;but-why-do-i-think-logic--creativity-is-cool&quot;&gt;But why do I think logic + creativity is cool?&lt;/h2&gt;

&lt;p&gt;I am both a scientist and a musician. Or at least I pretend to be, to some
degree, I value both logic and creatively very highly. My entire life I’ve only
ever wanted to be a chemical engineer, or an actor, or a virologist, or a
singer-songwriter. But I never truly pursued one of those careers, and I think
the reason is because they don’t stimulate both my logical mind and my creative
mind. Coding does. I love using reasoning to work through a problem and then
having to be innovative to build out a solution. And as a bonus, you get to see
the results of your work immediately (in many cases).&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-plan-on-doing-after-ive-gained-some-coding-skills&quot;&gt;What do I plan on doing after I’ve gained some coding skills?&lt;/h2&gt;

&lt;p&gt;Another big part of why I’ve been inspired to learn to code is that the
potential of this skill set is practically limitless. There is so much
versatility to work in almost any industry, at companies of all sizes, anywhere
in the world, and with many different kinds of people. I think there is also a
lot of opportunity to create something that helps make the world a better place.
Ultimately, I would love to work on a project that I find personally meaningful.
I’m not quite sure what that would be, yet, but I have a few ideas.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m about to start a 13-week coding immersive at Fullstack Academy. I won’t go into the details of why I chose Fullstack, but let’s just say that, so far, I’m extremely happy with my decision. I’m also super pumped about starting!</summary></entry></feed>