<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-03-07T14:18:00-05:00</updated><id>/feed.xml</id><title type="html">Jimmy Farillo</title><subtitle>NYC software engineer</subtitle><entry><title type="html">The Basics of Database Indexes for Relational Databases</title><link href="/2017/08/23/the-basics-of-database-indexes-for-relational-databases.html" rel="alternate" type="text/html" title="The Basics of Database Indexes for Relational Databases" /><published>2017-08-23T00:00:00-04:00</published><updated>2017-08-23T00:00:00-04:00</updated><id>/2017/08/23/the-basics-of-database-indexes-for-relational-databases</id><content type="html" xml:base="/2017/08/23/the-basics-of-database-indexes-for-relational-databases.html">&lt;p&gt;The purpose of creating an index on a particular table in your database is to
make it faster to search through the table and find the row or rows that you
want. The downside is that indexes make it slower to add rows or make updates to
existing rows for that table. So adding indexes can increase read performance
and decrease write performance. Indexes are also used to enforce uniqueness
constraints, but I won’t go into that for this post.&lt;/p&gt;

&lt;h2 id=&quot;but-first-lets-talk-about-karaoke&quot;&gt;But First, Let’s Talk About Karaoke!&lt;/h2&gt;

&lt;p&gt;Besides being my favorite pastime (just FYI, I’m Filipino), karaoke provides a
good analogy for indexes and might help you when reading the rest of this post.&lt;/p&gt;

&lt;p&gt;All karaoke joints I’ve been to provide songbooks that contain the list of songs
you can sing. The pages are organized like a database table, usually with 3
columns: song title, artist, and code. The code is what you enter into the
system to bring up the karaoke track. And there are usually two songbooks: one
sorted by artist name and one sorted by song title. That way you can either
think of an artist you want to sing and then look through their songs, or look
up a specific song title you know you want to sing or in case you don’t know the
artist’s name. These songbooks are like indexes for the database of songs. They
provide a sorted list of data that is easily searchable by relevant information.
There isn’t an index for the code column because that information is not
relevant information that you would search by.&lt;/p&gt;

&lt;p&gt;Back to actual databases…&lt;/p&gt;

&lt;h2 id=&quot;how-do-indexes-increase-read-performance&quot;&gt;How Do Indexes Increase Read Performance?&lt;/h2&gt;

&lt;p&gt;Think about the primary key column of a particular table. It is usually the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;
column, and it is usually a digit that increments with each new row in the
table. So when you try to retrieve a specific row from the database using its
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, the database doesn’t need to search through every single row to find the
one you’re asking for; the data is already sorted and can be searched using
efficient algorithms. Even if you were to rearrange the rows in the table so
that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column was unsorted, the primary key column of tables is
automatically indexed, meaning there is a copy of that column with the sorted
data that the database will use to search. And that index contains pointers to
the actual rows in the table, so once it has found the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; from that
copied data, it knows exactly where to find the rest of the information for that
row.&lt;/p&gt;

&lt;p&gt;Indexes on columns that are not the primary key column work in the same way. For
example, you might have an articles table in your database that contains columns
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt;, as well as the primary key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;.
Depending on how you query for data in your application, you might want to add
indexes on some of these columns to improve read performance.&lt;/p&gt;

&lt;p&gt;If your application has a feature where you can search for articles by their
title, it might be wise to put an index on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; column. This will create
a copy of that column where all the articles’ titles are sorted. Maybe your
application also allows users to view articles from a specific time period that
they define. Instead of the database having to check every single row’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; column, you can put an index on that column, and the database
will be able to easily find the articles that were published in that time frame
because they will all be right next to each other. However, it seems unnecessary
(and a bit ridiculous) to put on index on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; column because your
application is unlikely to query the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;articles&lt;/code&gt; table by the full contents of
each article. (There are much better ways to search through large bodies of text
in databases.)&lt;/p&gt;

&lt;p&gt;Indexes can also be useful for foreign key columns when dealing with
associations. Let’s say the articles table also contains an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column
that corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column on the users table. If you put an index on
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column, when you query the database for all the articles by a
particular author, the results can be found much faster because all articles by
that author will be grouped together.&lt;/p&gt;

&lt;h2 id=&quot;indexes-on-multiple-columns&quot;&gt;Indexes On Multiple Columns&lt;/h2&gt;

&lt;p&gt;You can also create a single index from multiple columns in a table. Extending
the example from above, maybe your application allows authors to view their own
articles, and the default view is to show them in reverse chronological order.
On your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;articles&lt;/code&gt; table, it would make sense to create an index using both the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; columns. Here’s a diagram of how you might think
about that index:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| author_id | published_at |
|-----------|--------------|
|           | 2017-08-17   |
|     1     | 2017-08-20   |
|           | 2017-08-22   |
|-----------|--------------|
|           | 2017-08-14   |
|           | 2017-08-20   |
|     2     | 2017-08-21   |
|           | 2017-08-22   |
|           | 2017-08-23   |
|-----------|--------------|
|     3     | 2017-08-01   |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when querying the database for all the articles by an author and ordered by
their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; dates, the database can use this index to quickly retrieve
the data.&lt;/p&gt;

&lt;p&gt;When creating an index from multiple columns, it is important that you specify
the correct order of the columns. The above index was created by first
specifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column and then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;published_at&lt;/code&gt; column. Had it
been reversed, the index would not be nearly as useful for the page we want:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| published_at | author_id |
|--------------|-----------|
| 2017-08-01   | 3         |
|--------------|-----------|
| 2017-08-07   | 3         |
|--------------|-----------|
| 2017-08-14   | 2         |
|              | 3         |
|--------------|-----------|
| 2017-08-17   | 1         |
|--------------|-----------|
| 2017-08-20   | 1         |
|              | 2         |
|--------------|-----------|
| 2017-08-21   | 2         |
|--------------|-----------|
| 2017-08-22   | 1         |
|              | 2         |
|--------------|-----------|
| 2017-08-23   | 2         |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When creating an index, you want the database to be able to eliminate as many
items as possible for at each step of its search. In the first example, after
finding the appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt;, all other rows for other authors are
eliminated, and the database then just has to search through a handful of
remaining rows. The second index is not even usable for our purposes of showing
a single author’s articles in reverse chronology because there is no way to
effectively search through the indexed data. So keep in mind the column order
that will create the index that will be most beneficial to your database
queries.&lt;/p&gt;

&lt;h2 id=&quot;how-do-indexes-decrease-write-performance&quot;&gt;How Do Indexes Decrease Write Performance?&lt;/h2&gt;

&lt;p&gt;The cost of improving database read times using indexes is that write times
suffer. Adding a new row to a table without indexes is simple. The database
finds the next available space in the table to add the new entry and adds it,
that’s it. However, when adding a new row to a table with one or more indexes,
the database adds the new entry to the table, and then it has to add a new entry
into each index on that table, making sure to insert the entry into the correct
spot in the index to ensure that the data is properly sorted. And this
performance degradation applies to creates, updates, and deletes for the table.
For this reason, adding unnecessary indexes on tables should be avoided, and
indexes that are no longer used should be removed.&lt;/p&gt;

&lt;p&gt;Adding indexes is about improving performance of search queries. Maybe the goal
of your database is to provide a data store that is often written to and rarely
read from. If that is the case, decreasing the performance of the more common
operation, writing, is probably not worth the increase in performance you get
from reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">The purpose of creating an index on a particular table in your database is to make it faster to search through the table and find the row or rows that you want. The downside is that indexes make it slower to add rows or make updates to existing rows for that table. So adding indexes can increase read performance and decrease write performance. Indexes are also used to enforce uniqueness constraints, but I won’t go into that for this post.</summary></entry><entry><title type="html">AlterConf NYC 2017 + Social Rules for Healthy Communication</title><link href="/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication.html" rel="alternate" type="text/html" title="AlterConf NYC 2017 + Social Rules for Healthy Communication" /><published>2017-08-21T00:00:00-04:00</published><updated>2017-08-21T00:00:00-04:00</updated><id>/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication</id><content type="html" xml:base="/2017/08/21/alterconf-nyc-2017-social-rules-for-healthy-communication.html">&lt;p&gt;This weekend I attended my first &lt;a href=&quot;https://www.alterconf.com/&quot;&gt;AlterConf&lt;/a&gt;, a
one-day conference with the aim of helping to create a more inclusive tech
industry. There were many great talks throughout the day as the speakers shared
their inspiring stories and delved into thought-provoking topics, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Designing ethically-conscious products&lt;/li&gt;
  &lt;li&gt;Potential problems with the way tech companies express how they value their
employees&lt;/li&gt;
  &lt;li&gt;How to empower so-called “quiet developers”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One talk stood out to me for its simplicity and message of “fostering healthy
communication on small teams”. The speaker was Rachel Vincent, the Head of
Operations at The Recurse Center, which provides educational programming
retreats in NYC. In Rachel’s talk, she highlighted the social rules that her
team has adopted that help ensure they communicate with each other in efficient,
honest, and non-harmful ways. These are the four social rules:&lt;/p&gt;

&lt;h2 id=&quot;no-feigning-surprise&quot;&gt;No Feigning Surprise&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Really?! You don’t know about… ?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This rule is about not acting surprised when a person shares that they don’t
know about something. This type of reaction adds no benefit to the conversation
and can often lead to making the person feel bad or insecure for not knowing
about the topic. Furthermore, in an industry like tech where people are
constantly learning, it is important for people to feel comfortable admitting
that they don’t know something to their colleagues. When people feign surprise
at such an admission, it can inhibit the learning process for that individual.&lt;/p&gt;

&lt;h2 id=&quot;no-well-actuallys&quot;&gt;No Well-Actuallys&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A: “Beethoven’s Symphony №5 is probably his most famous work, and he was 38
years old when he finished it. It’s my favorite of his, especially the second
movement.”
B: “Well, actually he was 37 years old.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A well-actually is when someone corrects (often by interruption) an
insignificant fact stated by another person. While it is always important to
convey accurate information, being corrected on small details is not beneficial
to the actual topic being discussed. These minor corrections do not serve
truth-seeking. Corrections that do provide real clarification to the
conversation and are not given with a disguised yearning for admiration are, of
course, always welcome.&lt;/p&gt;

&lt;h2 id=&quot;no-backseat-driving&quot;&gt;No Backseat Driving&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A: “Maybe running that rake task again will fix it.”
B: “I tried running it 5 times already.”
C: “Just clear the cache!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Backseat driving is when a conversation is happening between two or more people
and someone attempts to interject with their own advice. In most cases, that
individual does not have the full information to be providing useful advice and
ends up slowing down the individuals actually engaged in the conversation. It is
most efficient (and least annoying) to fully engage in the conversation first
before offering advice.&lt;/p&gt;

&lt;h2 id=&quot;no-subtle-isms&quot;&gt;No Subtle-isms&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“It’s so easy my grandmother could do it.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A subtle-ism is a statement with underlying, often unintentional, tones of
sexism, racism, homophobia, or other similar biases that can make others feel
uncomfortable or unwelcome. The last thing we want to do is make someone feel
bad for various aspects about their lifestyle and/or identity, even if that was
not the intention of the statement.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m not going to lie, I have definitely broken all of these rules before, and I
am sure that I will continue to break them. I’m not perfect. But my hope is that
by keeping these rules in mind during both my personal and professional
communications, I can become better at identifying when I break them so that I
can apologize, correct myself, and move on.&lt;/p&gt;

&lt;p&gt;I also highly encourage anyone who is interested to attend an AlterConf event.
They take place throughout the year in cities across the world, the tickets are
fairly inexpensive for a tech conference (basic tickets were $25 for the event
I attended), and the mission of the conference is quite admirable and important
in our largely homogenous, oftentimes uninviting industry.&lt;/p&gt;

&lt;p&gt;And a big thanks to my friend &amp;amp; coworker Melissa Moy for urging me to attend
this event!&lt;/p&gt;</content><author><name></name></author><summary type="html">This weekend I attended my first AlterConf, a one-day conference with the aim of helping to create a more inclusive tech industry. There were many great talks throughout the day as the speakers shared their inspiring stories and delved into thought-provoking topics, including:</summary></entry><entry><title type="html">Learn Design Patterns: Strategy Pattern</title><link href="/2017/02/23/learn-design-patterns-strategy-pattern.html" rel="alternate" type="text/html" title="Learn Design Patterns: Strategy Pattern" /><published>2017-02-23T00:00:00-05:00</published><updated>2017-02-23T00:00:00-05:00</updated><id>/2017/02/23/learn-design-patterns-strategy-pattern</id><content type="html" xml:base="/2017/02/23/learn-design-patterns-strategy-pattern.html">&lt;p&gt;The strategy pattern is an alternative to the
&lt;a href=&quot;/2017/02/19/learn-design-patterns-template-method-pattern.html&quot;&gt;template method pattern&lt;/a&gt;
I wrote about in my previous post, providing a different solution to the common
programming problem of requiring some variation within an algorithm. Both
patterns use polymorphism in their approaches, but while the template method
pattern relies on inheritance, the strategy pattern relies on composition and
delegation.&lt;/p&gt;

&lt;h2 id=&quot;composition&quot;&gt;Composition&lt;/h2&gt;

&lt;p&gt;To use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; example from the post on the template method pattern, you
might choose to think about parties as being made up of different parts, such as
a venue, guests, supplies, and activities. Modeled in code, these parts could be
defined as instance variables with accessor methods.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  attr_accessor :venue, :guests, :supplies, :activities

  def initialize(args)
    @venue = args[:venue]
    @guests = args[:guests]
    @supplies = args[:supplies]
    @activities = args[:activities]
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Composition describes the “has a” relationship between the object and the parts
that it is made up of. From this perspective, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; “has a” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venue&lt;/code&gt;, “has a”
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guests&lt;/code&gt;, “has a” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplies&lt;/code&gt;, and “has a” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activities&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is in contrast with inheritance, which describes a “is a” relationship. A
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; “is a” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So another way to look at the different types a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; could be is to think
about them in terms of their parts. Here’s an example of a birthday party and a
game night party implemented using composition rather than inheritance.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  attr_accessor :venue, :guests, :supplies, :activities

  def initialize(args)
    @venue = args[:venue]
    @guests = args[:guests]
    @supplies = args[:supplies]
    @activities = args[:activities]
  end
end

birthday_party = Party.new(
  venue: Place.new(&quot;Chuck E. Cheese's&quot;),
  guests: [User.new('Margaret Atwood'), User.new('David Mitchell')],
  supplies: [Food.new('birthday cake')],
  activities: [Activity.new('sing happy birthday')]
)

game_night = Party.new(
  venue: Place.new('246 Maple Lane'),
  guests: [User.new('Ruth Ozeki'), User.new('Kazuo Ishiguro')],
  supplies: [Game.new('Catan'), Game.new('Bananagrams')],
  activities: [Activity.new('play games')]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, each instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; is instantiated with different parts.
Specifically, the array supplies for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;birthday_party&lt;/code&gt; contains a single object
of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Food&lt;/code&gt;, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game_night&lt;/code&gt; contains two objects of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt;. We’ll
come back to this example below, when we get into the specifics of the strategy
pattern.&lt;/p&gt;

&lt;p&gt;Instead of defining different kinds of parties as subclasses of the abstract
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class, instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; are made to be different because they are
composed of different parts. The advantage of using composition over inheritance
is that there is no coupling of subclasses to a superclass in composition,
reducing the number of dependencies in your code.&lt;/p&gt;

&lt;h2 id=&quot;delegation&quot;&gt;Delegation&lt;/h2&gt;

&lt;p&gt;Delegation often comes up when composition is used. Delegation is the concept of
passing off some work to another object.&lt;/p&gt;

&lt;p&gt;There will be some logic involved for inviting our guests to the party, and we
could put that logic inside our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  attr_accessor :venue, :guests, :supplies, :activities

  def initialize(args)
    @venue = args[:venue]
    @guests = args[:guests]
    @supplies = args[:supplies]
    @activities = args[:activities]
  end

  def invite_guests
    guests.each { |guest| invite(guest) }
  end

  def invite(guest)
    puts &quot;Hi #{guest.name}, please come to my party at #{venue}!&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we could also delegate this task to each guest by placing that logic inside
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class and sending that message to the guest objects.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User
  attr_accessor :name

  def initialize(name)
    @name = name
  end

  def send_invitation(context)
    puts &quot;Hi #{name}, please come to my party at #{context.venue}!&quot;
  end
end

class Party
  attr_accessor :venue, :guests, :supplies, :activities

  def initialize(args)
    @venue = args[:venue]
    @guests = args[:guests]
    @supplies = args[:supplies]
    @activities = args[:activities]
  end

  def invite_guests
    guests.each { |guest| guest.send_invitation(self) }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invite_guests&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class sends the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send_invitation&lt;/code&gt; message to each guest, which is defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class.
The instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; also passes a reference of itself, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;, as an
argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send_invitation&lt;/code&gt;, allowing the method to know the context in which
it should be performed. The logic of how to invite a guest has been passed off
to each guest object.&lt;/p&gt;

&lt;h2 id=&quot;the-strategy-pattern&quot;&gt;The Strategy Pattern&lt;/h2&gt;

&lt;p&gt;Now that we’ve discussed composition and delegation, we can use them in the
strategy pattern. Let’s Party on! 🎉&lt;/p&gt;

&lt;p&gt;You might remember the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; method from the previous post about the
template method pattern. It contains all the logic necessary for throwing a
great party.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def throw_party
  invite_guests
  buy_supplies
  clean_house
  welcome_guests
  do_activities
  kick_out_guests
  clean_house
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can create variation in that algorithm by delegating the responsibilities to
the different parts that compose each party. If you remember, the only parts
that differ between birthday parties and game nights are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplies&lt;/code&gt; and the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activities&lt;/code&gt;, so I’m going to ignore the methods the deal with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venue&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guests&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  attr_accessor :venue, :guests, :supplies, :activities

  def initialize(args)
    @venue = args[:venue]
    @guests = args[:guests]
    @supplies = args[:supplies]
    @activities = args[:activities]
  end

  def throw_party
    invite_guests
    buy_supplies
    clean_house
    welcome_guests
    do_activities
    kick_out_guests
    clean_house
  end

  def buy_supplies
    supplies.each { |supply| supply.buy }
  end

  def do_activities
    activities.each { |activity| activity.perform(self) }
  end
end

class Food
  def buy
    ...
  end
end

class Game
  def buy
    ...
  end
end

class Activity
  def perform
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplies&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activities&lt;/code&gt; are the objects that compose our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;. All
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supplies&lt;/code&gt; that make up our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; should implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buy&lt;/code&gt; method, whether
each object is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Food&lt;/code&gt;, or any other party supply. These objects all
implement a common interface, even though the implementations will likely be
different for each type of object. Similarly, all activities will implement the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; method. Without knowing the internals of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity#perform&lt;/code&gt;, we can
safely assume that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; method for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt; object for singing
happy birthday will likely have different side effects than the one for playing
games. All of these sections of the algorithm have been delegated to the parts
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; object that are involved in their execution.&lt;/p&gt;

&lt;p&gt;The strategy pattern solves the same problem that the template method pattern
solves, but it reduces the amount of coupling between objects by using
composition over inheritance. Instead of identifying the sections of your
algorithm that can vary and then placing those sections in subclasses of an
abstract superclass, the algorithm has been delegated to the different parts
that compose your object, and those objects implement their respective portions
of the algorithm however they see fit.&lt;/p&gt;</content><author><name></name></author><summary type="html">The strategy pattern is an alternative to the template method pattern I wrote about in my previous post, providing a different solution to the common programming problem of requiring some variation within an algorithm. Both patterns use polymorphism in their approaches, but while the template method pattern relies on inheritance, the strategy pattern relies on composition and delegation.</summary></entry><entry><title type="html">Learn Design Patterns: Template Method Pattern</title><link href="/2017/02/19/learn-design-patterns-template-method-pattern.html" rel="alternate" type="text/html" title="Learn Design Patterns: Template Method Pattern" /><published>2017-02-19T00:00:00-05:00</published><updated>2017-02-19T00:00:00-05:00</updated><id>/2017/02/19/learn-design-patterns-template-method-pattern</id><content type="html" xml:base="/2017/02/19/learn-design-patterns-template-method-pattern.html">&lt;p&gt;A couple friends and I have a web development book club. The goal is to learn
and grow together as software engineers. But really, sometimes it’s more like a
support group, where we use a lot of 😞 and 😢 to discuss our respective
screw-ups at work and the impossible vastness of information about web
development and how we only know the smallest tiniest minusculest amount of it.
We’re a fun group…&lt;/p&gt;

&lt;p&gt;The first book we read together was &lt;em&gt;Practical Object-Oriented Design in Ruby&lt;/em&gt;
by Sandi Metz. Really amazing resource for new Ruby devs (or probably any new
dev using an OO language). For our next book, we just started reading &lt;em&gt;Design
Patterns in Ruby&lt;/em&gt; by Russ Olsen, so this will be the first in a planned series
about the various design patterns discussed in the book.&lt;/p&gt;

&lt;p&gt;The first pattern is the template method pattern.&lt;/p&gt;

&lt;h2 id=&quot;inheritance--polymorphism&quot;&gt;Inheritance + Polymorphism&lt;/h2&gt;

&lt;p&gt;The template method pattern is an object-oriented design pattern that relies on
inheritance and polymorphism. By inheritance, I am talking about the
parent-child relationship between classes, where a class can be defined as a
subclass of another and inherits all of that superclass’ methods. By
polymorphism, I am talking about the ability to invoke the same method on
multiple objects of different classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Inheritance

class Computer
  def initialize
    @on = false
  end

  def power_on
    @on = true
    puts 'Booting up...'
  end
end

class Laptop &amp;lt; Computer
  def close_lid
    ...
  end

  def open_lid
    ...
  end
end

my_laptop = Laptop.new
my_laptop.power_on          # =&amp;gt; Booting up...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the basic inheritance example above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; class defines the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_on&lt;/code&gt; method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Laptop&lt;/code&gt; class is defined as a subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; and
also defines its own set of methods. But since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computer&lt;/code&gt; is its superclass,
instances of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Laptop&lt;/code&gt; inherit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;power_on&lt;/code&gt; method and are able to be sent that
message.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Polymorphism

def too_big?(obj)
  obj.length &amp;gt; 10
end

str = 'Hello, World!'
arr = [1, 2, 3]

too_big?(str)               # =&amp;gt; true
too_big?(arr)               # =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The polymorphism example is showing that both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; classes
implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; method. There is some role that they are both playing,
perhaps the role of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Countable&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;too_big?&lt;/code&gt; method doesn’t care whether it
is being passed a string or an array; it just cares whether it is being passed
an object that is countable and has implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt;. Being able to send the
same message to objects that are instances of different classes is polymorphism.&lt;/p&gt;

&lt;h2 id=&quot;the-template-method-pattern&quot;&gt;The Template Method Pattern&lt;/h2&gt;

&lt;p&gt;The template method pattern combines the concepts of inheritance and
polymorphism to solve the common programming problem of needing to allow for
some level of variation in an algorithm.&lt;/p&gt;

&lt;p&gt;If you were a strange person, you might think of your life in terms of Ruby
objects and messages that you send to these objects. So if you wanted to throw a
birthday party for your niece, you might have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class with a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; method that does all the steps necessary for giving your niece a
successful birthday party.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party
    invite_guests
    clean_house
    buy_birthday_cake
    welcome_guests
    sing_happy_birthday
    kick_out_guests
    clean_house
  end

  private

  ...all the private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What if you wanted to throw another party, maybe a game night for you and some
friends? It would be great to reuse this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; class and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt;
method, but while some parts of the method are general to any party, some parts
are very specific to birthday parties.&lt;/p&gt;

&lt;p&gt;We could put in some conditionals:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party(type)
    invite_guests
    clean_house

    if type == 'birthday'
      buy_birthday_cake
    elsif type == 'game_night'
      buy_board_games
    end

    welcome_guests

    if type == 'birthday'
      sing_happy_birthday
    elsif type == 'game_night'
      play_games
    end

    kick_out_guests
    clean_house
  end

  private

  ...all the private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yikes! That is not the best solution. Any time you want to throw a different
kind of party, you will have to modify this method until it grows out of
control. And you’ll have to add more and more private methods to this class. But
having completely separate classes for each party type isn’t ideal, either,
since we saw that most of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; logic is common to any type of
party.&lt;/p&gt;

&lt;p&gt;The template method pattern is a way of separating the parts that are the same
from the parts that are different. The parts that are the same get implemented
in a parent class while the parts that are different are implemented in the
subclasses.&lt;/p&gt;

&lt;p&gt;The only parts that differ between the two party types are the buying of
supplies and the party activities. So we can create an abstract Party class
(abstract because there will be no instances of it) that will serve as the
superclass for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Party
  def throw_party
    invite_guests
    buy_supplies
    clean_house
    welcome_guests
    do_activities
    kick_out_guests
    clean_house
  end

  private

  def buy_supplies
    raise 'Not implemented: buy_supplies'
  end

  def do_activities
    raise 'Not implemented: do_activities'
  end

  ...all the other private methods being used in throw_party...

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, all the parts that are the same can stay in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;, and the parts that are
different can be defined in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class BirthdayParty &amp;lt; Party

  private

  def buy_supplies
    buy_birthday_cake
  end

  def do_activities
    sing_happy_birthday
  end

  def buy_birthday_cake
    ...
  end

  def sing_happy_birthday
    ...
  end
end

class GameNight &amp;lt; Party

  private

  def buy_supplies
    buy_board_games
  end

  def do_activities
    play_games
  end

  def buy_board_games
    ...
  end

  def play_games
    ...
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The superclass is the template for what happens for a party, and each subclass
implements just the parts that vary from the template.&lt;/p&gt;

&lt;p&gt;In the current implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;, an error is raised for methods that
are meant to be implemented in the subclasses. This provides a clear signal to
anyone wanting to implement a new type of party that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buy_supplies&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_activities&lt;/code&gt; are methods that should be implemented in the new party type.
Another approach would be to implement these methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; with some
default behavior that the subclasses then override.&lt;/p&gt;

&lt;p&gt;Back to the use of inheritance and polymorphism. It is fairly clear from the
code that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt; are both subclasses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;. So
every method defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt; is also available to the subclasses. In our
example, the only publicly available method in either subclass is the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt; method defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Party&lt;/code&gt;. That’s where the polymorphism comes in.
Whatever object decides to throw a party can do so by sending the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_party&lt;/code&gt;
message to an instance of either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BirthdayParty&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameNight&lt;/code&gt;. It doesn’t care
which type of object it sends the message to, and even though the results may be
different, both types of objects will respond to the message.&lt;/p&gt;</content><author><name></name></author><summary type="html">A couple friends and I have a web development book club. The goal is to learn and grow together as software engineers. But really, sometimes it’s more like a support group, where we use a lot of 😞 and 😢 to discuss our respective screw-ups at work and the impossible vastness of information about web development and how we only know the smallest tiniest minusculest amount of it. We’re a fun group…</summary></entry><entry><title type="html">A Gentle Introduction to SQL and NoSQL Databases</title><link href="/2017/02/09/a-gentle-introduction-to-sql-and-nosql-databases.html" rel="alternate" type="text/html" title="A Gentle Introduction to SQL and NoSQL Databases" /><published>2017-02-09T00:00:00-05:00</published><updated>2017-02-09T00:00:00-05:00</updated><id>/2017/02/09/a-gentle-introduction-to-sql-and-nosql-databases</id><content type="html" xml:base="/2017/02/09/a-gentle-introduction-to-sql-and-nosql-databases.html">&lt;p&gt;At some point during your career as a web developer, you will have to decide
what type of database is best suited for your application. You might face this
decision very soon, if you are planning on building your own application as a
side project. And at the very least, you will probably be asked about databases
in a job interview for a web developer role.&lt;/p&gt;

&lt;p&gt;Web applications use either relational (SQL) or non-relational (NoSQL) databases
for persistent data storage. The point of this post is to provide a simple,
high-level overviews of relational and non-relational databases, highlight their
differences and discuss scenarios in which to use each, and briefly examine
common database management systems for each. I do not claim to be a database
expert, so some of the language in this post will use generalizations. I am
always looking to learn more about databases, but I know enough to be an
effective developer, and hopefully this post will provide you with enough info
so you can make more informed decisions regarding databases.&lt;/p&gt;

&lt;h2 id=&quot;relational-sql-databases&quot;&gt;Relational (SQL) Databases&lt;/h2&gt;

&lt;p&gt;In relational databases, the data is stored in tables. These tables are like
Excel spreadsheets with rows and columns, except a table in a database is
generally much more strict in its structure. A row in a table represents a
single record, and the columns are the attributes for that record. For example,
we might have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_posts&lt;/code&gt; table with various attributes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date_published&lt;/code&gt;. The table will also have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; column, which is a unique
number for each record in the table.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# blog_posts

| id | title       | body            | data_published |
|  1 | First Post! | blah blah...    | Feb 6, 2017    |
|  2 | Iguanas     | Yay iguanas...  | Feb 7, 2017    |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can imagine, data often has relationships with other data. That’s where
the term “relational” comes from. In our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_posts&lt;/code&gt; example, we might want to
also want to store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt; for each blog post. We could store attributes
such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_first_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_last_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_email&lt;/code&gt;, etc. with each
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_post&lt;/code&gt; record, but that would get very messy very fast. Plus, there’s
probably already a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; table with all that information. So instead, we can
add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; column to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_posts&lt;/code&gt; table.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# blog_posts

| id | title       | body           | data_published | author_id |
|  1 | First Post! | blah blah...   | Feb 6, 2017    |        23 |
|  2 | Iguanas     | Yay iguanas... | Feb 7, 2017    |         5 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; values match up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; values in the authors table.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# author

| id | first_name  | last_name | email                 |
|  5 | David       | Mitchell  | dmitch@cloudatlas.com |
| 23 | Margaret    | Atwood    | handmaid@tales.com    |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So when you retrieve a blog post, you can “join” the data with the corresponding
author data by matching the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; columns from the tables.
Conversely, you can lookup an author and then “join” the blog post data to find
all the blog posts by a particular author.&lt;/p&gt;

&lt;p&gt;SQL stands for “structured query language,” the language used to interact with
relational databases.&lt;/p&gt;

&lt;h2 id=&quot;non-relational-nosql-databases&quot;&gt;Non-Relational (NoSQL) Databases&lt;/h2&gt;

&lt;p&gt;Non-relational databases make up all the other types of databases that aren’t
relational databases, and NoSQL means “not only SQL.” This post will cover two
types of NoSQL databases, document stores and key-value stores.&lt;/p&gt;

&lt;h3 id=&quot;document-stores&quot;&gt;Document Stores&lt;/h3&gt;

&lt;p&gt;In document stores, the data is stored in collections, and collections are made
up of objects referred to as documents. These collections are the equivalent of
relational tables, and documents are the equivalent of records. So a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;
collection would consist of documents, each one representing a different user.&lt;/p&gt;

&lt;p&gt;Documents have attributes, which are defined for each collection. In the case of
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; collection, we might have attributes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_name&lt;/code&gt;,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;. Document objects are encoded using familiar formats such as JSON,
XML, or YAML. So JSON-encoded documents might look like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# users

{
    &quot;first_name&quot;: &quot;David&quot;,
    &quot;last_name&quot;: &quot;Mitchell&quot;,
    &quot;email&quot;: &quot;dmitch@cloudatlas.com&quot;
},
{
    &quot;first_name&quot;: &quot;Margaret&quot;,
    &quot;last_name&quot;: &quot;Atwood&quot;,
    &quot;email&quot;: &quot;handmaid@tales.com&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Document stores can also allow for relationships between documents through a
similar method as is done in relational databases, referencing another object’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, there is some redundancy, but it illustrates two ways
a relationship could be defined. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authors&lt;/code&gt; collection, documents contain
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_posts&lt;/code&gt; attribute which is an array of references to blog post documents.
In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog_posts&lt;/code&gt; collection, the documents contain an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author_id&lt;/code&gt; attribute
which is a reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authors&lt;/code&gt; collection. Based on the data you are
working with, a one-to-many or many-to-many relationship could be handled with
either method.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# authors

{
    &quot;id&quot;: 2,
    &quot;first_name&quot;: &quot;David&quot;,
    &quot;last_name&quot;: &quot;Mitchell&quot;,
    &quot;email&quot;: &quot;dmitch@cloudatlas.com&quot;,
    &quot;blog_posts&quot;: [1, 4]
}

# blog_posts

{
    &quot;id&quot;: 1,
    &quot;title&quot;: &quot;First Post!&quot;,
    &quot;body&quot;: &quot;blah blah...&quot;,
    &quot;date_published&quot;: &quot;Feb 6, 2017&quot;,
    &quot;author_id&quot;: 2
},
{
    &quot;id&quot;: 4,
    &quot;title&quot;: &quot;Iguanas&quot;,
    &quot;body&quot;: &quot;Yay iguanas...&quot;,
    &quot;date_published&quot;: &quot;Feb 7, 2017&quot;,
    &quot;author_id&quot;: 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For some data, it may even make sense to define relationships between data by
embedding documents within documents. An example of this might be a shopping
cart:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# shopping_carts

{
    &quot;user_id&quot;: 24,
    &quot;items&quot;: [{
        &quot;name&quot;: &quot;Black Swan Green&quot;,
        &quot;price&quot;: 15.99,
        &quot;quantity&quot;: 2
    }, {
        &quot;name&quot;: &quot;Oryx and Crake&quot;
        &quot;price&quot;: 24.99,
        &quot;quantity&quot;: 1
    }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;key-value-stores&quot;&gt;Key-Value Stores&lt;/h3&gt;

&lt;p&gt;Key-value stores are simpler than document stores and are exactly what they
sound like, key-value pairs. Like big hashes. Some key-value stores are just
string keys paired with string values. Others allow for more complex data
structures for the values, such as unordered sets of strings.&lt;/p&gt;

&lt;p&gt;A common use case for key-value stores in web applications is for storing user
preferences. User preferences often need to persist across user sessions, but
they may not be appropriate to be stored directly on the user record/document in
the database. Because key-value stores are generally made to be accessed
quickly, they provide a simple and fast storage solution for user preferences.&lt;/p&gt;

&lt;h2 id=&quot;acid-compliance&quot;&gt;ACID Compliance&lt;/h2&gt;

&lt;p&gt;An important topic to discuss when comparing relational and non-relational
databases is ACID. Acid stands for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;tomicity: Transactions are performed in an “all or nothing” manner. If
one or more operations within the transaction fails, then all other operations
in the transaction will fail. A common example is a banking transaction where
money should be withdrawn from one bank account and deposited into another. If
either of those operations fail, you want the entire transaction to fail.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency: The data can only be modified in ways that are allowed and
adhere to any and all defined constraints. An example of a constraint is that
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt; attribute is limited to 100 characters. In this case, consistency
in the database means that a transaction will never result in an email with
more than 100 characters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;solation: Concurrent transactions result in the data being in a state as
if the transactions occurred one after the other. There’s a bit more to it,
but to keep it simple you can think of isolation as data being locked when it
is the target of a transaction. When data is locked, other transactions are
not operating on the data, and the data is isolated.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;urability: Once a transaction is complete, the new state of the data will
persist even if a system failure or some other error occurs immediately
afterward.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, I’m speaking in generalizations, but it is commonly understood in web
development that relational databases are ACID-compliant while non-relational
databases are not fully ACID-compliant.&lt;/p&gt;

&lt;p&gt;With full ACID compliance, there are some drawbacks. Most notably, performance
and scalability. Many NoSQL databases are designed to be more highly scalable
and faster than SQL databases, having sacrificed ACID-compliance.&lt;/p&gt;

&lt;h2 id=&quot;deciding-between-sql-and-nosql-using-the-cap-theorem&quot;&gt;Deciding Between SQL and NoSQL Using the CAP Theorem&lt;/h2&gt;

&lt;p&gt;To help you evaluate the needs of your application in order to determine if you
should use a relational or non-relational database, you can reference the CAP
Theorem.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;https://youtu.be/Jw1iFr4v58M&quot;&gt;great video explanation&lt;/a&gt; (only 4.5
minutes!) on YouTube that I recommend, but I’ll try my hand at explaining it.&lt;/p&gt;

&lt;p&gt;The CAP Theorem proposes that distributed database systems (“distributed”
meaning comprised of multiple nodes that communicate with each other to act as a
single system) have 3 potential attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency: When performing a “read” from one node in the system, you
always receive the most recent “write”, even if that “write” occurred on a
different node. Different than the “consistency” in ACID.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;vailability: When a request is made to a node, as long as the node has
not failed, it will respond to the request.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;artition Tolerance: When a node is removed from the system, the system
continues to operate and uphold its other attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the CAP Theorem also states that a distributed database system can have
a maximum of 2 of these attributes and it is theoretically impossible to have
all 3.&lt;/p&gt;

&lt;p&gt;For example, if a “write” happens to one node in the system and is immediately
followed by a “read” to a different node, there are 3 possible outcomes of the
“read”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;C &amp;amp; P&lt;/strong&gt;: The system is partition tolerant, so the nodes are not able to talk
to each other. The node would wait until it is able to talk to the other nodes
in order to maintain consistency before returning the data. However, since the
nodes are not able to communicate, the node would not respond to the request
and is thus not available.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A &amp;amp; P&lt;/strong&gt;: The system is partition tolerant, so the nodes are not able to talk
to each other. The node would maintain availability and return the most recent
version of the data that it has, even though it is not the most recent version
of the data in the system. So the node is not consistent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A &amp;amp; C&lt;/strong&gt;: The system is not partition tolerant and can only uphold its other
attributes when all nodes are connected to the system. This means that the
node would be able to communicate with the others nodes, maintain consistency
by retrieving the most recent data, and maintain availability by responding to
the request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third outcome can be dismissed because partition tolerance is an integral
aspect of distributed database systems. Therefore, the choice comes down to
consistency or availability.&lt;/p&gt;

&lt;p&gt;From the section on ACID, we can generalize that since ACID-compliant database
systems are less performant than non-ACID-compliant database systems, then
ACID-compliant databases are less available than non-ACID-compliant systems.
They are less available but more consistent. Conversely, non-ACID-compliant
databases are more available and less consistent.&lt;/p&gt;

&lt;p&gt;This choice between availability and consistency should be one of the factors
you consider when deciding between relational and non-relational databases. Is
it more important for your application to maintain very strict control over your
data, even at the cost of performance? Or is the speed of your application more
important than making sure your data is handled exactly as you expect 100% of
the time?&lt;/p&gt;

&lt;h2 id=&quot;common-database-management-systems&quot;&gt;Common Database Management Systems&lt;/h2&gt;

&lt;p&gt;This will be a short section about the database management systems that I see
most often in job listings, web applications I’ve worked on, web applications my
friends work on, etc.&lt;/p&gt;

&lt;h3 id=&quot;relational&quot;&gt;Relational&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;: Very popular.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;: Implements more advanced data types
than MySQL.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;: Community-developed fork of MySQL.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;: Lightweight.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;non-relational&quot;&gt;Non-Relational&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;: JSON-like document store.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt;: JSON document store.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;: Key-value store. Supports strings, lists, sets,
hashes, and more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt;: “Multiple master” model for high
availability and scalability.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;DynamoDB&lt;/a&gt;: Cloud data store from AWS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;: Graph database.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;For many web applications, the database provides the foundation upon which the
application is built. It is important to choose a database that will serve your
application and its users appropriately for the foreseeable future of your
application. However, as your application evolves, you can always re-evaluate
your database needs and migrate your data over to a new system.&lt;/p&gt;

&lt;p&gt;And there you go! More than you ever probably wanted to read about databases in
the context of web development.&lt;/p&gt;</content><author><name></name></author><summary type="html">At some point during your career as a web developer, you will have to decide what type of database is best suited for your application. You might face this decision very soon, if you are planning on building your own application as a side project. And at the very least, you will probably be asked about databases in a job interview for a web developer role.</summary></entry><entry><title type="html">Make Code Reviews a Little Bit Better With Automation</title><link href="/2017/02/03/make-code-reviews-a-little-bit-better-with-automation.html" rel="alternate" type="text/html" title="Make Code Reviews a Little Bit Better With Automation" /><published>2017-02-03T00:00:00-05:00</published><updated>2017-02-03T00:00:00-05:00</updated><id>/2017/02/03/make-code-reviews-a-little-bit-better-with-automation</id><content type="html" xml:base="/2017/02/03/make-code-reviews-a-little-bit-better-with-automation.html">&lt;p&gt;As a software developer on a team that includes other software developers, code
reviews are an important part of the job. It is probably the one duty of my job
that I can expect to do every single day. Why? What is the purpose of code
reviews? Well, code reviews have several purposes. They:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Help ensure that new code is comprised of sound logic.&lt;/li&gt;
  &lt;li&gt;Help ensure that new features follow the specifications.&lt;/li&gt;
  &lt;li&gt;Help ensure that new code conforms to the agreed upon code style (if your
company/team doesn’t have a code style guide, you should consider adopting
one).&lt;/li&gt;
  &lt;li&gt;Act as announcements of new code and features to the other team members /
maintainers of the code base.&lt;/li&gt;
  &lt;li&gt;Share knowledge of best practices amongst the team.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When a team of people is working and collaborating together in one code base,
code reviews are a great tool for keeping everyone in sync.&lt;/p&gt;

&lt;p&gt;However, it is not uncommon for a developer to dread the task of reviewing a
team member’s code. Especially when the pull request is lengthy. I am definitely
guilty of avoiding reviewing a large PR for an entire day, having it constantly
in the back of my head that I’ll eventually have to “suffer” through the process
of going through the proposed code line-by-line, looking for errors and
optimizations.&lt;/p&gt;

&lt;p&gt;And then at some point last year the title of an episode of the &lt;a href=&quot;https://devchat.tv/ruby-rogues&quot;&gt;Ruby
Rogues&lt;/a&gt; podcast caught my attention:
&lt;a href=&quot;https://devchat.tv/ruby-rogues/251-rr-automating-code-reviews-with-mindaugas-mozuras&quot;&gt;“Automating Code Reviews with Mindaugas
Mozūras”&lt;/a&gt;
. In the episode, they discuss &lt;a href=&quot;https://github.com/mmozuras/pronto&quot;&gt;pronto&lt;/a&gt;, a
Ruby gem that can be used in conjunction with various runners to automate parts
of your code review process. It even works seamlessly with GitHub and can be
configured to automatically add review comments to new PRs. The best part is
that it only looks at the code diff and only adds review comments on lines of
code that were changed.&lt;/p&gt;

&lt;p&gt;Very soon after listening to that episode I proposed adding the gem to the main
application that my team works on.&lt;/p&gt;

&lt;p&gt;I decided to only use the rubocop runner, since my goal was to only automate the
“conforms to the agreed upon code style” purpose of code reviews. The setup was
really simple, and I even created a separate account to be the pronto commenter.
It is aptly named &lt;strong&gt;prontosaurus&lt;/strong&gt;, thanks to one of my friends at work. The
pronto gem runs during the CI build when a PR is opened or pushed to.&lt;/p&gt;

&lt;p&gt;There was some initial tweaking that needed to be done once everything was set
up, such as enabling/disabling certain warnings based on my team’s code style
preferences. Even now, prontosaurus will sometimes leave comments that we
outright ignore because we don’t agree with the style being enforced… and I
should probably open a PR to make those changes…&lt;/p&gt;

&lt;p&gt;But overall I think prontosaurus has been a positive addition to our code review
process. We view his/her comments as suggestions rather than as strict rules
that will prevent us from merging a PR.&lt;/p&gt;

&lt;h3 id=&quot;the-advantages-of-using-pronto&quot;&gt;The advantages of using pronto:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Reviewers can focus on looking at the code at a higher level while leaving
code style to prontosaurus.&lt;/li&gt;
  &lt;li&gt;When a bot tells you about little mistakes you made, you feel less ashamed
than if it were an actual member of your team.&lt;/li&gt;
  &lt;li&gt;Learning new code style best practices. There have been several times when
prontosaurus has commented on my code with some method or coding style that I
have not heard of. The more you know!&lt;/li&gt;
  &lt;li&gt;A cute little dinosaur makes comments on your PRs!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-disadvantages-of-using-pronto&quot;&gt;The disadvantages of using pronto:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Will most likely require several rounds of tweaking based on your team’s
preferences.&lt;/li&gt;
  &lt;li&gt;Sometimes not suitable for very large code changes. For example, when doing a
find/replace PR, it can touch many many lines of legacy code. The pronto bot
may have some not very nice things to say about the code style of that code,
but it may not be the appropriate time to address those comments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One extra little config that I added was the ability to turn off prontosaurus’s
comments by simply adding a “No Pronto” label to the PR. This alleviates the
issue of prontosaurus going on a rampage for large PRs.&lt;/p&gt;

&lt;p&gt;If you are interested in implementing the pronto gem for your application, I
recommend listening to &lt;a href=&quot;https://devchat.tv/ruby-rogues/251-rr-automating-code-reviews-with-mindaugas-mozuras&quot;&gt;“Automating Code Reviews with Mindaugas
Mozūras”&lt;/a&gt;
and checking out the &lt;a href=&quot;https://github.com/mmozuras/pronto&quot;&gt;pronto GitHub repo&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">As a software developer on a team that includes other software developers, code reviews are an important part of the job. It is probably the one duty of my job that I can expect to do every single day. Why? What is the purpose of code reviews? Well, code reviews have several purposes. They:</summary></entry><entry><title type="html">How to Become a Web Developer</title><link href="/2017/02/01/how-to-become-a-web-developer.html" rel="alternate" type="text/html" title="How to Become a Web Developer" /><published>2017-02-01T00:00:00-05:00</published><updated>2017-02-01T00:00:00-05:00</updated><id>/2017/02/01/how-to-become-a-web-developer</id><content type="html" xml:base="/2017/02/01/how-to-become-a-web-developer.html">&lt;p&gt;About 2 years ago, I switched careers from marketing to web development. I won’t
bore you with the whole story of why or how I did it. Find any other millennial
that attended a coding bootcamp, and I’m sure my story is very similar.&lt;/p&gt;

&lt;p&gt;However, I will say that the switch to web development has been without a doubt
the greatest major life decision I’ve ever made. But it hasn’t been without its
struggles. This post is for aspiring and newly minted web developers to pass
along whatever knowledge I’ve gained in my first couple years as a web
developer.&lt;/p&gt;

&lt;h2 id=&quot;learn-the-basics&quot;&gt;Learn the Basics&lt;/h2&gt;

&lt;p&gt;The first step towards becoming a web developer is to learn the basics about
programming. Strings, floats, variables, arrays, hashes, objects, loops, etc.
You have to start learning the vocabulary of developers and how to create simple
programs that solve simple problems.&lt;/p&gt;

&lt;p&gt;Many people suggest learning the basics with Ruby, JavaScript, or Python. I
think that’s good advice since all are 1) very beginner-friendly and 2) are
likely the languages you will be using in your first job as a developer. By
“beginner-friendly”, I mean that the languages are high-level; they don’t
require you to deal with such things as a multi-step build process or garbage
collection. They all also have robust features.&lt;/p&gt;

&lt;p&gt;Here are the resources I highly recommend:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubymonk.com/&quot;&gt;RubyMonk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;practice-coding-exercises&quot;&gt;Practice Coding Exercises&lt;/h2&gt;

&lt;p&gt;After you’ve got the basics down, the next step is to practice the crap out of
coding exercises. If you plan to attend a coding bootcamp, you will most likely
have to take a coding assessment as part of your application. That assessment
will consist of several coding exercises that will test your ability to solve
problems using code. If you don’t plan to attend a coding bootcamp, these types
of coding exercises will come up in job interviews. And even if you just want to
learn to code as a side hobby, coding exercises help you learn about algorithms,
data structures, features of the language, and how to write efficient code.
Practicing coding is so important.&lt;/p&gt;

&lt;p&gt;The resources I’ve used for coding exercises are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewars.com/&quot;&gt;CodeWars&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://exercism.io/&quot;&gt;Exercism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;start-building-web-applications&quot;&gt;Start Building Web Applications&lt;/h2&gt;

&lt;p&gt;This step is a little more broad than the others. I count my time at my coding
bootcamp for this step.&lt;/p&gt;

&lt;p&gt;There are so many topics you can choose from, but I think a good place to start
is by building a front-end application using a popular JavaScript framework such
as React, AngularJS, or Ember.js.&lt;/p&gt;

&lt;p&gt;You could also start by learning jQuery, but trust me, you don’t want to become
a jQuery expert. You might not know what jQuery is, but just know that it’s the
past. The future (and really the present) of front-end web development is
JavaScript frameworks. But starting with jQuery will give you an introduction to
DOM (&lt;strong&gt;D&lt;/strong&gt;ocument &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;M&lt;/strong&gt;odel) manipulation and browser events.&lt;/p&gt;

&lt;p&gt;After learning some front-end development concepts, you could venture to the
back-end. Ruby on Rails is a popular web framework that many companies use.
Node.js is a JavaScript runtime environment that is becoming hugely popular
right now. Django is another large web framework (like Ruby on Rails), but it
uses Python.&lt;/p&gt;

&lt;p&gt;Learning about databases is also good. Learn the differences between relational
and non-relational databases. And definitely learn some SQL, as many many
companies use relational databases such as MySQL and PostrgreSQL.&lt;/p&gt;

&lt;p&gt;Some good places to start learning web development concepts are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learnredux.com/&quot;&gt;Learn Redux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://egghead.io/&quot;&gt;Egghead&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeschool.com/&quot;&gt;Code School&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sqlzoo.net/&quot;&gt;SQLZOO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;level-up-with-computer-science-fundamentals&quot;&gt;Level Up with Computer Science Fundamentals&lt;/h2&gt;

&lt;p&gt;This last step should probably be done continuously and while doing the other
steps. But I’m putting it last because CS fundamentals are often tested during
job interviews.&lt;/p&gt;

&lt;p&gt;By CS fundamentals, I’m talking primarily about data structures and algorithms.
Data structures such as linked lists, binary trees, binary search tress, and
graphs. Searching and sorting algorithms such as binary search, merge sort, and
quick sort.&lt;/p&gt;

&lt;p&gt;To get more practice with CS fundamentals, try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.khanacademy.org/computing/computer-science/algorithms&quot;&gt;Khan Academy:
Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.edx.org/course/introduction-computer-science-harvardx-cs50x&quot;&gt;Harvard CS50 @
edX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Cracking the Coding Interview&lt;/em&gt; by Gayle Laakmann McDowell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are roughly the steps that I followed for my transition to web
development. I don’t claim to know the best way to learn web development, but I
found these resources useful, and I hope you do, too.&lt;/p&gt;</content><author><name></name></author><summary type="html">About 2 years ago, I switched careers from marketing to web development. I won’t bore you with the whole story of why or how I did it. Find any other millennial that attended a coding bootcamp, and I’m sure my story is very similar.</summary></entry><entry><title type="html">Keyed Collections in JavaScript: Set vs Map vs WeakSet vs WeakMap</title><link href="/2015/09/10/keyed-collections-in-javascript-set-vs-map-vs-weakset-vs-weakmap.html" rel="alternate" type="text/html" title="Keyed Collections in JavaScript: Set vs Map vs WeakSet vs WeakMap" /><published>2015-09-10T00:00:00-04:00</published><updated>2015-09-10T00:00:00-04:00</updated><id>/2015/09/10/keyed-collections-in-javascript-set-vs-map-vs-weakset-vs-weakmap</id><content type="html" xml:base="/2015/09/10/keyed-collections-in-javascript-set-vs-map-vs-weakset-vs-weakmap.html">&lt;p&gt;In celebration of the &lt;a href=&quot;https://nodejs.org/en/blog/release/v4.0.0/&quot;&gt;release of Node.js
4.0.0&lt;/a&gt; this week, I’m going to
cover some more ES2015 features that we now have access to in Node.js by
default.&lt;/p&gt;

&lt;p&gt;Until ES2015, JavaScript had only one type of collection for data: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt;.
Arrays are collections that are indexed using numeric values. But now we have
four new types of collections: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeakSet&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeakMap&lt;/code&gt;. Instead
of being indexed like arrays, these new collections are keyed.&lt;/p&gt;

&lt;p&gt;This article will give an overview of each new collection type so that you can
begin using them in your code.&lt;/p&gt;

&lt;h2 id=&quot;set&quot;&gt;Set&lt;/h2&gt;

&lt;p&gt;Sets are collections of values, either primitive or object references. These
values must be unique and are added using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; property
returns the number of values in the set. Here are a couple examples of creating
sets:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var set1 = new Set();
set1;
// ==&amp;gt; Set { }

set1.add('a');
// ==&amp;gt; Set { 'a' }

set1.add(1);
// ==&amp;gt; Set { 'a', 1 }

set1.add('1');
// ==&amp;gt; Set { 'a', 1, '1' }

// The value 1 has already been added.
set1.add(1);
// ==&amp;gt; Set { 'a', 1, '1' }

// Values can be object references.
var obj1 = { prop1: 'Hello!' };
set1.add(obj1);
// ==&amp;gt; Set { 'a', 1, '1', { prop1: 'Hello!' } }

// Sets can also be created using iterables, such as arrays.
var set2 = new Set(['a', 'b', 'c', 'c']);
set2;
// ==&amp;gt; Set { 'a', 'b', 'c' }

set2.size;
// ==&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are many other useful methods, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has&lt;/code&gt;. They
function as you might expect:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var set3 = new Set([1, 2, 3, 4, 5]);
set3;
// ==&amp;gt; Set { 1, 2, 3, 4, 5 }

set3.has(2);
// ==&amp;gt; true

set3.delete(2);
set3;
// ==&amp;gt; Set { 1, 3, 4, 5 }

set3.has(2);
// ==&amp;gt; false

set3.clear();
set3;
// ==&amp;gt; Set { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A cool thing about sets is that when iterating over them, the values are
iterated over in the order in which they were inserted. You can iterate over
them using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; method on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set.prototype&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var set4 = new Set();
set4.add(5);
set4.add(2);
set4.add(9);
set4.add(1);

// The first two params in the callback are the value.
// This is for consistency with the Array forEach method.

set4.forEach((val1, val2, set) =&amp;gt; { console.log(val1 + 10); });
// ==&amp;gt; 15
// ==&amp;gt; 12
// ==&amp;gt; 19
// ==&amp;gt; 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;Maps are another new collection type in JavaScript. The data is stored as
key-value pairs that can be added using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; method. Keys and values can
both be of any type, primitive or object. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; property returns the
number of key-value pairs in the map.&lt;/p&gt;

&lt;p&gt;Like sets, the keys are iterated over in the order in which they were inserted.
This is probably the biggest advantage of storing data in a map as opposed to a
JavaScript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Creating a map:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map1 = new Map();
map1.set(1, 'hello');
// ==&amp;gt; Map { 1 =&amp;gt; 'hello' }

map1.set('jimmy', {x: 'y'})
// ==&amp;gt; Map { 1 =&amp;gt; 'hello', 'jimmy' =&amp;gt; { lastName: 'farrell' } }

var arr1 = ['a', 'b'];
map1.set(arr1, [1, 2]);
// ==&amp;gt; Map { 1 =&amp;gt; 'hello', 'jimmy' =&amp;gt; { x: 'y' }, [ 'a', 'b' ] =&amp;gt; [ 1, 2 ] }

// You can also pass an iterable to the constructor.
var map2 = new Map([['hello', 'world'], [1, 'one']]);
map2;
// ==&amp;gt; Map { 'hello' =&amp;gt; 'world', 1 =&amp;gt; 'one' }

map2.size;
// ==&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maps have the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has&lt;/code&gt; methods, but they also have a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; method for accessing the value of a specific key. You can use these
methods like such:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map3 = new Map();
map3.set(1, 'a');
map3.set(2, 'b');
map3.set(3, 'c');
map3;
// ==&amp;gt; Map { 1 =&amp;gt; 'a', 2 =&amp;gt; 'b', 3 =&amp;gt; 'c' }

map3.has(3);
// == true

map3.delete(3);
map3;
// ==&amp;gt; Map { 1 =&amp;gt; 'a', 2 =&amp;gt; 'b' }

map3.has(3);
// ==&amp;gt; false

map3.get(2);
// ==&amp;gt; 'b'

map3.clear();
map3;
// ==&amp;gt; Map { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maps also have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; method, similar to the one for sets.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var map4 = new Map();
map4.set('hello', 'world');
map4.set(10, 5);

// First param is the value
// Second param is the key

map4.forEach((val, key, map) =&amp;gt; { console.log(key + val); });
// ==&amp;gt; 'helloworld'
// ==&amp;gt; 15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;weakset-and-weakmap&quot;&gt;WeakSet and WeakMap&lt;/h2&gt;

&lt;p&gt;As you can tell by their names, weakSets and weakMaps are similar to sets and
maps, but with some key differences.&lt;/p&gt;

&lt;p&gt;Values in a weakSet can only be object references. Keys in a weakMap can only
be object references.&lt;/p&gt;

&lt;p&gt;The values in weakSets and keys in weakMaps are weakly held object references.
This means that if that reference is the only reference to that object, the
object can be garbage collected and that entry (value in a weakSet, key-value
pair in a weakMap) will be removed from the collection.&lt;/p&gt;

&lt;p&gt;Because they are comprised of weakly held object references, weakSets and
weakMaps cannot be iterated over and do not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt;
method is also not available for weakSets and weakMaps.&lt;/p&gt;</content><author><name></name></author><summary type="html">In celebration of the release of Node.js 4.0.0 this week, I’m going to cover some more ES2015 features that we now have access to in Node.js by default.</summary></entry><entry><title type="html">What Is ‘this’ in JavaScript?</title><link href="/2015/09/03/what-is-this-in-javascript.html" rel="alternate" type="text/html" title="What Is 'this' in JavaScript?" /><published>2015-09-03T00:00:00-04:00</published><updated>2015-09-03T00:00:00-04:00</updated><id>/2015/09/03/what-is-this-in-javascript</id><content type="html" xml:base="/2015/09/03/what-is-this-in-javascript.html">&lt;p&gt;Today I had a phone interview for a software engineering position. I felt
fairly prepared for the interview, simply because I’ve been
living/breathing/eating/sweating/crying code for 6 months straight. But a very
simple JavaScript question tripped me up a little bit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“What is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; in JavaScript?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, I know a lot about JavaScript, and I’ve thought about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; very often in
the past 6 months. But this very general, very broad question got me a little
frazzled. I didn’t know where to start my answer because I had never tried to
answer this question before. And it really does cover a lot of things.&lt;/p&gt;

&lt;p&gt;My approach, and I don’t think it was a &lt;em&gt;super&lt;/em&gt; terrible one, was to explain as
much information about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; as I could muster. I won’t go into specifics, but
I mentioned the methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind&lt;/code&gt; as well as gave a very
indirect and haphazard explanation of the call site. Not the best response, but
still a way to show that I know a lot about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; even if I couldn’t answer
the question succinctly and elegantly.&lt;/p&gt;

&lt;p&gt;However, if I had a chance to respond to that question again, this is what I
would say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; is a binding that is defined in a function’s scope at the time that
the function is called. It’s value is an object that is determined by the
call site of the function. There are four rules that govern the value of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;. In increasing precedence, these rules are: default binding, implicit
binding, explicit binding, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; binding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From there, the interviewer might ask for clarification on what the “call site”
of a function refers to. And this would be an appropriate response:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The call site of a function is the location in which the function is invoked.
It is easiest to think about the call site by referencing the call stack when
the function is invoked. For example, if function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; calls function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,
then the call stack when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; is invoked is simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;. So, to determine the
value of this during this particular invocation of function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, we must look
at where function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; is invoked inside of function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, the interviewer might ask about the four rules mentioned previously, and
an answer could be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Default binding&lt;/strong&gt; is the rule with least precedence. If none of the other
three rules apply, then the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; will be the global object, which
varies depending on the runtime environment. In the browser, the global
object is usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt;. In Node.js, it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implicit binding&lt;/strong&gt; refers to the context of the function call. For
example, if the function is accessed as a method of an object, such as
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj.func&lt;/code&gt;, then this inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func&lt;/code&gt; will refer to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Explicit binding&lt;/strong&gt; takes precedence over the previous two rules and
requires use of either the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind&lt;/code&gt; function methods.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; binding&lt;/strong&gt; is set when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword is used in a function call.
The newly constructed object that is created by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword will be
the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my opinion, this would’ve been a home run answer to this very common
JavaScript interview question. Don’t fumble around and give a correct, but
incomplete, response like I did. And if you’re interested in diving a little
bit deeper into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;, I highly recommend the &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/&quot;&gt;&lt;em&gt;You Don’t Know
JS&lt;/em&gt;&lt;/a&gt; book series by Kyle Simpson.
He has the entire series available for free on GitHub, and they are fantastic
books!&lt;/p&gt;</content><author><name></name></author><summary type="html">Today I had a phone interview for a software engineering position. I felt fairly prepared for the interview, simply because I’ve been living/breathing/eating/sweating/crying code for 6 months straight. But a very simple JavaScript question tripped me up a little bit.</summary></entry><entry><title type="html">Lodash Methods FTW!</title><link href="/2015/08/06/lodash-methods-ftw.html" rel="alternate" type="text/html" title="Lodash Methods FTW!" /><published>2015-08-06T00:00:00-04:00</published><updated>2015-08-06T00:00:00-04:00</updated><id>/2015/08/06/lodash-methods-ftw</id><content type="html" xml:base="/2015/08/06/lodash-methods-ftw.html">&lt;p&gt;I only recently realized the power of the &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt;
library. Previously, I had only used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; method (also called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.assign&lt;/code&gt;) which can be used as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var object1 = {
  prop1: 'hello',
  prop2: 'bye'
};

var object2 = {
  prop1: 'hey',
  prop3: 'what is up?'
};

_.extend(object1, object2);console.log(object1);
// ==&amp;gt; { prop1: 'hey', prop2: 'bye', prop3: 'what is up?' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Essentially, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; takes an object as its first parameter, another object
as its second parameter, and adds the properties from the second object to the
first object as well as overwriting the properties on the first object if those
properties also exist on the second object.&lt;/p&gt;

&lt;p&gt;My primary use case for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; is in PUT routes in my API back-end. That
data flow looks like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User updates document using a form on the front-end&lt;/li&gt;
  &lt;li&gt;Front-end code sends the updated document to the server using an AJAX PUT
request&lt;/li&gt;
  &lt;li&gt;PUT route on server queries the database for the document (this is the old
version)&lt;/li&gt;
  &lt;li&gt;PUT route on server uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.extend&lt;/code&gt; to update the old version of the document&lt;/li&gt;
  &lt;li&gt;PUT route on server saves the newly updated document and sends it back to the
front-end&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;_findindex--_findwhere&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findIndex&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findWhere&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This week I discovered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findIndex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findWhere&lt;/code&gt;, and they are nice
additions to JavaScript’s built-in array methods such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.filter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.forEach&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.map&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.reduce&lt;/code&gt;. This is how you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findIndex&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var foods = [
  { id: 1, food: 'pizza' },
  { id: 2, food: 'ice cream' },
  { id: 3, food: 'ramen' },
  { id: 4, food: 'veggie burger' }
];

var ramenIndex = _.findIndex(arr, (item) =&amp;gt; item.food === 'ramen');
console.log(ramenIndex);
// ==&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findIndex&lt;/code&gt; returns the index of the first element in the array that returns
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in its callback function. Clutch!&lt;/p&gt;

&lt;p&gt;The second Lodash method I discovered this week is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findWhere&lt;/code&gt;. I am a big
fan of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.filter&lt;/code&gt; in JavaScript. It is awesome because you can do this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var animals = [
  { name: 'Carl'', type: 'bunny' },
  { name: 'Bob', type: 'bunny' },
  { name: 'Sue', type: 'cat' },
  { name: 'Sally', type: 'bunny' }
];

var bunnies = animals.filter((animal) =&amp;gt; animal.type === 'bunny');
console.log(bunnies);
// ==&amp;gt; [
// { name: 'Carl', type: 'bunny' },
// { name: 'Bob', type: 'bunny' },
// { name: 'Sally', type: 'bunny' }
// ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, when you only expect/want one element out of that array, you would have to
do this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var animals = [
  { name: 'Carl'', type: 'bunny' },
  { name: 'Bob', type: 'bunny' },
  { name: 'Sue', type: 'cat' },
  { name: 'Sally', type: 'bunny' }
];

var sue = animals.filter((animal) =&amp;gt; animal.type === 'cat')[0];
console.log(sue);
// ==&amp;gt; { name: 'Sue', type: 'cat' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Getting an array of only one element is not nice. That’s why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findWhere&lt;/code&gt; is
so awesome. It allows you to do this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var animals = [
  { name: 'Carl'', type: 'bunny' },
  { name: 'Bob', type: 'bunny' },
  { name: 'Sue', type: 'cat' },
  { name: 'Sally', type: 'bunny' }
];

var sue = _.findWhere(animals, { type: 'cat' });
console.log(sue);
// ==&amp;gt; { name: 'Sue', type: 'cat' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same result, but much cleaner code. It searches the array and returns the first
element where all the properties match the object you’ve passed as the second
parameter. And that is why I love &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.findWhere&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will definitely be looking into utilizing more Lodash methods in my code, now
that I’m finally understanding how they can simplify my code and make it more
semantic. And I definitely suggest that you check out the
&lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; library; because why write things that have
already been written for you?&lt;/p&gt;</content><author><name></name></author><summary type="html">I only recently realized the power of the Lodash library. Previously, I had only used the _.extend method (also called _.assign) which can be used as follows:</summary></entry></feed>